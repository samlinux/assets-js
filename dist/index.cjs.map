{"version":3,"file":"index.cjs","sources":["../src/did/asset_canister.did.js","../src/index.ts","../src/did/index.js"],"sourcesContent":["export const idlFactory = ({IDL}) => {\r\n    const ClearArguments = IDL.Record({});\r\n    const BatchId = IDL.Nat;\r\n    const Key = IDL.Text;\r\n    const CreateAssetArguments = IDL.Record({\r\n        'key': Key,\r\n        'content_type': IDL.Text,\r\n    });\r\n    const UnsetAssetContentArguments = IDL.Record({\r\n        'key': Key,\r\n        'content_encoding': IDL.Text,\r\n    });\r\n    const DeleteAssetArguments = IDL.Record({'key': Key});\r\n    const ChunkId = IDL.Nat;\r\n    const SetAssetContentArguments = IDL.Record({\r\n        'key': Key,\r\n        'sha256': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        'chunk_ids': IDL.Vec(ChunkId),\r\n        'content_encoding': IDL.Text,\r\n    });\r\n    const BatchOperationKind = IDL.Variant({\r\n        'CreateAsset': CreateAssetArguments,\r\n        'UnsetAssetContent': UnsetAssetContentArguments,\r\n        'DeleteAsset': DeleteAssetArguments,\r\n        'SetAssetContent': SetAssetContentArguments,\r\n        'Clear': ClearArguments,\r\n    });\r\n    const HeaderField = IDL.Tuple(IDL.Text, IDL.Text);\r\n    const HttpRequest = IDL.Record({\r\n        'url': IDL.Text,\r\n        'method': IDL.Text,\r\n        'body': IDL.Vec(IDL.Nat8),\r\n        'headers': IDL.Vec(HeaderField),\r\n    });\r\n    const StreamingCallbackToken = IDL.Record({\r\n        'key': Key,\r\n        'sha256': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n        'index': IDL.Nat,\r\n        'content_encoding': IDL.Text,\r\n    });\r\n    const StreamingCallbackHttpResponse = IDL.Record({\r\n        'token': IDL.Opt(StreamingCallbackToken),\r\n        'body': IDL.Vec(IDL.Nat8),\r\n    });\r\n    const StreamingStrategy = IDL.Variant({\r\n        'Callback': IDL.Record({\r\n            'token': StreamingCallbackToken,\r\n            'callback': IDL.Func(\r\n                [StreamingCallbackToken],\r\n                [IDL.Opt(StreamingCallbackHttpResponse)],\r\n                ['query'],\r\n            ),\r\n        }),\r\n    });\r\n    const HttpResponse = IDL.Record({\r\n        'body': IDL.Vec(IDL.Nat8),\r\n        'headers': IDL.Vec(HeaderField),\r\n        'streaming_strategy': IDL.Opt(StreamingStrategy),\r\n        'status_code': IDL.Nat16,\r\n    });\r\n    const Time = IDL.Int;\r\n    return IDL.Service({\r\n        'authorize': IDL.Func([IDL.Principal], [], []),\r\n        'clear': IDL.Func([ClearArguments], [], []),\r\n        'commit_batch': IDL.Func(\r\n            [\r\n                IDL.Record({\r\n                    'batch_id': BatchId,\r\n                    'operations': IDL.Vec(BatchOperationKind),\r\n                }),\r\n            ],\r\n            [],\r\n            [],\r\n        ),\r\n        'create_asset': IDL.Func([CreateAssetArguments], [], []),\r\n        'create_batch': IDL.Func(\r\n            [IDL.Record({})],\r\n            [IDL.Record({'batch_id': BatchId})],\r\n            [],\r\n        ),\r\n        'create_chunk': IDL.Func(\r\n            [IDL.Record({'content': IDL.Vec(IDL.Nat8), 'batch_id': BatchId})],\r\n            [IDL.Record({'chunk_id': ChunkId})],\r\n            [],\r\n        ),\r\n        'delete_content': IDL.Func([DeleteAssetArguments], [], []),\r\n        'get': IDL.Func(\r\n            [IDL.Record({'key': Key, 'accept_encodings': IDL.Vec(IDL.Text)})],\r\n            [\r\n                IDL.Record({\r\n                    'content': IDL.Vec(IDL.Nat8),\r\n                    'sha256': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n                    'content_type': IDL.Text,\r\n                    'content_encoding': IDL.Text,\r\n                    'total_length': IDL.Nat,\r\n                }),\r\n            ],\r\n            ['query'],\r\n        ),\r\n        'get_chunk': IDL.Func(\r\n            [\r\n                IDL.Record({\r\n                    'key': Key,\r\n                    'sha256': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n                    'index': IDL.Nat,\r\n                    'content_encoding': IDL.Text,\r\n                }),\r\n            ],\r\n            [IDL.Record({'content': IDL.Vec(IDL.Nat8)})],\r\n            ['query'],\r\n        ),\r\n        'http_request': IDL.Func([HttpRequest], [HttpResponse], ['query']),\r\n        'http_request_streaming_callback': IDL.Func(\r\n            [StreamingCallbackToken],\r\n            [IDL.Opt(StreamingCallbackHttpResponse)],\r\n            ['query'],\r\n        ),\r\n        'list': IDL.Func(\r\n            [IDL.Record({})],\r\n            [\r\n                IDL.Vec(\r\n                    IDL.Record({\r\n                        'key': Key,\r\n                        'encodings': IDL.Vec(\r\n                            IDL.Record({\r\n                                'modified': Time,\r\n                                'sha256': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n                                'length': IDL.Nat,\r\n                                'content_encoding': IDL.Text,\r\n                            })\r\n                        ),\r\n                        'content_type': IDL.Text,\r\n                    })\r\n                ),\r\n            ],\r\n            ['query'],\r\n        ),\r\n        'set_asset_content': IDL.Func([SetAssetContentArguments], [], []),\r\n        'store': IDL.Func(\r\n            [\r\n                IDL.Record({\r\n                    'key': Key,\r\n                    'content': IDL.Vec(IDL.Nat8),\r\n                    'sha256': IDL.Opt(IDL.Vec(IDL.Nat8)),\r\n                    'content_type': IDL.Text,\r\n                    'content_encoding': IDL.Text,\r\n                }),\r\n            ],\r\n            [],\r\n            [],\r\n        ),\r\n        'unset_asset_content': IDL.Func([UnsetAssetContentArguments], [], []),\r\n    });\r\n};","import {ActorConfig} from \"@dfinity/agent\";\r\nimport {assetCanister} from \"./did\";\r\nimport {fileTypeFromBuffer} from \"file-type\";\r\nimport pLimit, {LimitFunction} from \"p-limit\";\r\n\r\ntype AssetCanister = ReturnType<typeof assetCanister>;\r\n\r\ninterface AssetManagerConfig extends ActorConfig {\r\n    concurrency?: number;\r\n    maxSingleFileSize?: number;\r\n    maxChunkSize?: number;\r\n    eventListener?: (event: AssetEvent) => void;\r\n}\r\n\r\ninterface Asset {\r\n    fileName: string;\r\n    path: string;\r\n    content: number[];\r\n    contentType: string;\r\n    contentEncoding: 'identity' | 'gzip' | 'compress' | 'deflate' | 'br';\r\n    sha256?: number[];\r\n}\r\n\r\ninterface AssetInsert {\r\n    (file: File, options?: Omit<Asset, 'fileName' | 'content' | 'contentEncoding'> & Partial<Pick<Asset, 'fileName' | 'contentEncoding'>>): Promise<string>;\r\n\r\n    (bytes: Blob | number[] | Uint8Array, options: Omit<Asset, 'content' | 'contentEncoding'> & Partial<Pick<Asset, 'contentEncoding'>>): Promise<string>;\r\n}\r\n\r\ninterface FileToAsset {\r\n    (...args: Parameters<AssetInsert>): Promise<Asset>;\r\n}\r\n\r\ninterface InsertAssetEvent {\r\n    key: string;\r\n    type: 'insert';\r\n    progress: {\r\n        current: number;\r\n        total: number;\r\n    };\r\n}\r\n\r\ninterface DeleteAssetEvent {\r\n    key: string;\r\n    type: 'delete';\r\n}\r\n\r\ntype AssetEvent = InsertAssetEvent | DeleteAssetEvent;\r\n\r\nconst isBrowser =\r\n    typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\r\n\r\nconst isNode =\r\n    typeof process !== \"undefined\" &&\r\n    process.versions != null &&\r\n    process.versions.node != null;\r\n\r\nconst isWebWorker =\r\n    typeof self === \"object\" &&\r\n    self.constructor &&\r\n    self.constructor.name === \"DedicatedWorkerGlobalScope\";\r\n\r\nconst crypto: Promise<any> = isBrowser\r\n    ? Promise.resolve(window.crypto)\r\n    : isWebWorker\r\n        ? Promise.resolve(self.crypto)\r\n        : isNode\r\n            ? import('crypto')\r\n            : Promise.resolve();\r\n\r\nconst hash = async (content: number[]): Promise<number[] | undefined> => {\r\n    if (isBrowser || isWebWorker) {\r\n        return Array.from(new Uint8Array(await (await crypto).subtle.digest('SHA-256', new Uint8Array(content))));\r\n    }\r\n    if (isNode) {\r\n        return Array.from((await crypto).createHash('sha256').update(new Uint8Array(content)).digest());\r\n    }\r\n}\r\n\r\nconst inputToAsset: FileToAsset = async (input, options) => {\r\n    let content: number[];\r\n    let fileName: string = options?.fileName as any;\r\n    let contentType: string = options?.contentType as any;\r\n    let path: string = options?.path ?? '/';\r\n    if (input instanceof Uint8Array) {\r\n        content = Array.from(input);\r\n    } else if (Array.isArray(input) && input.every(b => typeof b === 'number')) {\r\n        content = input;\r\n    } else if (input instanceof Blob) {\r\n        content = await new Promise((resolve) => {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => {\r\n                resolve(Array.from(Uint8Array.from(reader.result as any)));\r\n            });\r\n            reader.readAsArrayBuffer(input);\r\n        });\r\n        if (!fileName) {\r\n            if (input instanceof File) {\r\n                fileName = input.name;\r\n            } else {\r\n                throw '\"fileName\" property is required in options';\r\n            }\r\n        }\r\n        if (!contentType) {\r\n            contentType = input.type;\r\n        }\r\n    } else {\r\n        throw 'Asset could not be read (File, Blob, ArrayBuffer, Uint8Array and number[] are valid';\r\n    }\r\n    if (!path.startsWith('/')) {\r\n        path = '/' + path;\r\n    }\r\n    if (!path.endsWith('/')) {\r\n        path = path + '/';\r\n    }\r\n    const contentEncoding = options?.contentEncoding ?? 'identity';\r\n    const sha256 = options?.sha256 ?? await hash(content);\r\n\r\n    // If content type is not supplied in either the file or options, detect content type based on magic number\r\n    if (!contentType) {\r\n        const {mime = 'application/octet-stream'} = await fileTypeFromBuffer(Uint8Array.from(content)) ?? {};\r\n        contentType = mime;\r\n    }\r\n\r\n    return {\r\n        fileName,\r\n        path,\r\n        content,\r\n        contentType,\r\n        contentEncoding,\r\n        sha256,\r\n    };\r\n};\r\n\r\nexport class AssetManager {\r\n    private readonly _actor: AssetCanister;\r\n    private readonly _pLimit: LimitFunction;\r\n    private readonly _maxSingleFileSize: number;\r\n    private readonly _maxChunkSize: number;\r\n    private readonly _eventListener: (event: AssetEvent) => void;\r\n\r\n    constructor({concurrency, maxSingleFileSize, maxChunkSize, eventListener, ...actorConfig}: AssetManagerConfig) {\r\n        this._actor = assetCanister(actorConfig);\r\n        this._pLimit = pLimit(concurrency ?? 32);\r\n        this._maxSingleFileSize = maxSingleFileSize ?? 450000;\r\n        this._maxChunkSize = maxChunkSize ?? 1900000;\r\n        this._eventListener = eventListener ?? (() => null);\r\n    }\r\n\r\n    list = () => this._pLimit(() => this._actor.list({}));\r\n\r\n    batch = () => {\r\n        const scheduledOperations: Array<(batch_id: bigint) => Promise<Parameters<AssetCanister['commit_batch']>[0]['operations']>> = [];\r\n        const commit = async () => {\r\n            const {batch_id} = await this._pLimit(() => this._actor.create_batch({}));\r\n            const operations = (await Promise.all(scheduledOperations.map(scheduled_operation => scheduled_operation(batch_id)))).flat();\r\n            await this._pLimit(() => this._actor.commit_batch({batch_id, operations}));\r\n            operations.forEach(operation => {\r\n                if ('DeleteAsset' in operation) {\r\n                    this._eventListener({key: operation.DeleteAsset.key, type: 'delete'});\r\n                }\r\n            })\r\n        };\r\n        const insert: AssetInsert = async (input, options) => {\r\n            const asset = await inputToAsset(input, options);\r\n            const key = [asset.path, asset.fileName].join('');\r\n            this._eventListener({key, type: 'insert', progress: {current: 0, total: asset.content.length}});\r\n            scheduledOperations.push(async batch_id => {\r\n                const chunks = asset.content.reduce((chunks, byte, index) => {\r\n                    const chunkIndex = Math.floor(index / this._maxChunkSize)\r\n                    if (!chunks[chunkIndex]) {\r\n                        chunks[chunkIndex] = [];\r\n                    }\r\n                    chunks[chunkIndex].push(byte)\r\n                    return chunks;\r\n                }, [] as number[][]);\r\n                let progress = 0;\r\n                const chunkIds: bigint[] = await Promise.all(chunks\r\n                    .map(async chunk => {\r\n                        const {chunk_id} = await this._pLimit(() => this._actor.create_chunk({\r\n                            content: chunk,\r\n                            batch_id\r\n                        }));\r\n                        progress += chunk.length;\r\n                        this._eventListener({\r\n                            key,\r\n                            type: 'insert',\r\n                            progress: {current: progress, total: asset.content.length}\r\n                        });\r\n                        return chunk_id;\r\n                    })\r\n                );\r\n                return [\r\n                    {\r\n                        CreateAsset: {key, content_type: asset.contentType}\r\n                    },\r\n                    {\r\n                        SetAssetContent: {\r\n                            key,\r\n                            sha256: asset.sha256 ? [asset.sha256] : [],\r\n                            chunk_ids: chunkIds,\r\n                            content_encoding: asset.contentEncoding\r\n                        }\r\n                    },\r\n                ];\r\n            });\r\n            return key;\r\n        }\r\n        const _delete = async (key: string) => {\r\n            scheduledOperations.push(async () => [{DeleteAsset: {key}}]);\r\n        }\r\n\r\n        return {commit, insert, delete: _delete};\r\n    }\r\n\r\n    insert: AssetInsert = async (input, options) => {\r\n        const asset = await inputToAsset(input, options);\r\n        const key = [asset.path, asset.fileName].join('');\r\n\r\n        if (asset.content.length <= this._maxSingleFileSize) {\r\n            // Asset is small enough to be uploaded in one request\r\n            this._eventListener({key, type: 'insert', progress: {current: 0, total: asset.content.length}});\r\n            await this._pLimit(() => this._actor.store({\r\n                key,\r\n                content: asset.content,\r\n                content_type: asset.contentType,\r\n                sha256: asset.sha256 ? [asset.sha256] : [],\r\n                content_encoding: asset.contentEncoding\r\n            }));\r\n        } else {\r\n            // Create batch to upload asset in chunks\r\n            const batch = this.batch();\r\n            await batch.insert(asset.content, asset);\r\n            await batch.commit();\r\n        }\r\n\r\n        return key;\r\n    };\r\n\r\n    delete = async (key: string) => {\r\n        await this._pLimit(() => this._actor.delete_content({key}));\r\n        this._eventListener({key, type: 'delete'});\r\n    }\r\n}","import {idlFactory} from './asset_canister.did.js';\r\nimport {Actor} from \"@dfinity/agent\";\r\n\r\n/**\r\n * @type {(configuration: import(\"@dfinity/agent\").ActorConfig) => import(\"@dfinity/agent\").ActorSubclass<import(\"./asset_canister.did.js\")._SERVICE>}\r\n */\r\nexport const assetCanister = (configuration) => Actor.createActor(idlFactory, configuration);\r\n"],"names":["_ref","IDL","ClearArguments","Record","BatchId","Nat","Key","Text","CreateAssetArguments","key","content_type","UnsetAssetContentArguments","content_encoding","DeleteAssetArguments","ChunkId","SetAssetContentArguments","sha256","Opt","Vec","Nat8","chunk_ids","BatchOperationKind","Variant","CreateAsset","UnsetAssetContent","DeleteAsset","SetAssetContent","Clear","Tuple","HttpRequest","url","method","body","headers","HeaderField","StreamingCallbackToken","index","StreamingCallbackHttpResponse","token","StreamingStrategy","Callback","callback","Func","HttpResponse","streaming_strategy","status_code","Nat16","Time","Int","Service","authorize","Principal","clear","commit_batch","batch_id","operations","create_asset","create_batch","create_chunk","content","chunk_id","delete_content","get","accept_encodings","total_length","get_chunk","http_request","http_request_streaming_callback","list","encodings","modified","length","set_asset_content","store","unset_asset_content","_excluded","isBrowser","window","document","isNode","process","versions","node","isWebWorker","self","constructor","name","crypto","Promise","resolve","then","_interopNamespace","require","inputToAsset","input","options","_temp6","fileName","path","contentType","contentEncoding","_temp5","fileTypeFromBuffer","Uint8Array","from","_ref$mime","mime","startsWith","endsWith","_options$contentEncod","_options$sha","_crypto2","Array","createHash","update","digest","_crypto","subtle","_await$crypto$subtle$","_Array$from","_exit2","_temp4","_temp3","e","reject","hash","_temp7","_options$path","isArray","every","b","FileReader","reader","addEventListener","result","readAsArrayBuffer","_Promise","type","_temp11","_temp10","_ref2","_this2","this","_this3","_this","concurrency","maxSingleFileSize","maxChunkSize","eventListener","actorConfig","_actor","_pLimit","_maxSingleFileSize","_maxChunkSize","_eventListener","batch","scheduledOperations","commit","_ref3","all","map","scheduled_operation","_Promise$all","flat","forEach","operation","insert","asset","join","progress","current","total","push","chunks","reduce","byte","chunkIndex","Math","floor","chunk","_ref4","chunkIds","delete","_delete","_temp12","Actor","createActor","idlFactory","pLimit"],"mappings":"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"}